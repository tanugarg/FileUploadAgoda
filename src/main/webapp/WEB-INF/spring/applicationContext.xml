<?xml version="1.0"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd         
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd         
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd         
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd         
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-3.1.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">
	
	<beans profile="SCORE,ICA,SCORE_ADMIN">
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:nosql.properties</value>
				<value>classpath:app.properties</value>
				<value>classpath:api.properties</value>
			</list>
		</property>
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="order" value="1" />
	</bean>

	<!-- Activate @Configurable injection -->
	<context:spring-configured />
	<cache:annotation-driven />
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cacheManager-ref="ehcache" />
	<bean id="ehcache"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:configLocation="classpath:ehcache.xml" />

	<!-- enable auto-scan for all @Repository, @Service, @Controller java files 
		for beans -->
	<context:component-scan
		base-package="" />
	
	<!--&lt;!&ndash; add tomcat datasource instance to springs context &ndash;&gt;-->
	<!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">-->
		<!--<property name="jndiName" value="java:comp/env/jdbc/ShippingDS" />-->
		<!--<property name="resourceRef" value="true" />-->
	<!--</bean>-->


	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<!-- define session factor for hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<qualifier value="prodn" />
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_commments">true</prop>				
			</props>
		</property>

	</bean>
	<bean
		class="com.snapdeal.score.core.property.configurer.ApplicationPropertyConfigurer">
		<property name="locations">
			<value>classpath:application.properties</value>
		</property>
	</bean>
	<bean id="scheduledResetCounterService"
		class="com.snapdeal.score.services.counter.impl.ScheduledResetCounterService"
		name="scheduledResetCounterService">
		<property name="executionAllowed" value="${scheduled.reset.counter.execution.flag}"></property>
	</bean>
	<task:scheduled-tasks>
	<!--	<task:scheduled ref="autoReloadService" method="reloadCache"
			cron="${auto.cache.reload.cron}" />-->
		<task:scheduled ref="scheduledResetCounterService"
			method="resetAllCounters" cron="${scheduled.reset.package.counter.cron}" />
	</task:scheduled-tasks>
	<!-- add platform transaction manager -->
	
	<task:scheduled-tasks>
		<task:scheduled ref="taskUpdateSchedulerService" method="execute"
			cron="${task.update.polling.interval}" />
	</task:scheduled-tasks>
	
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="baseSessionFactory" lazy-init="true" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <qualifier value="base"/>
    <property name="dataSource">
      <ref bean="dataSource"/>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <prop key="hibernate.show_sql">true</prop>
      </props>
    </property>
  </bean>
  	<bean id = "clusteredScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="clusteredScheduler" />
		<property name="autoStartup" value="false" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="transactionManager">
			<ref bean="txManager" />
		</property>
		<property name="quartzProperties">
			<props>
				<!-- Job store -->
				<prop key="org.quartz.jobStore.misfireThreshold">6000000</prop>
				<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
				<prop key="org.quartz.jobStore.isClustered">true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
				<prop key="org.quartz.scheduler.instanceName">ClusteredScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.scheduler.jmx.export">true</prop>
				<prop key="org.quartz.threadPool.threadCount">20</prop>
				<!-- Job Logging -->
				<prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingTriggerHistoryPlugin</prop>
				<prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">Trigger {0} fired job {5} at: {4, date, dd/MM/yyyy HH:mm:ss}</prop>
				<prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage"> Trigger {0} completed firing job {5} at {4, date, dd/MM/yyyy HH:mm:ss}</prop>
			</props>
		</property>
	</bean>
		<bean id = "concurrentScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="concurrentScheduler" />
		<property name="autoStartup" value="false" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="transactionManager">
			<ref bean="txManager" />
		</property>
		<property name="quartzProperties">
			<props>
				<!-- Job Logging -->
				<prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingTriggerHistoryPlugin</prop>
				<prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">Trigger {0} fired job {5} at: {4, date, dd/MM/yyyy HH:mm:ss}</prop>
				<prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage"> Trigger {0} completed firing job {5} at {4, date, dd/MM/yyyy HH:mm:ss}</prop>
			</props>
		</property>
	</bean>
	<bean id="httpclientProperties" class="com.snapdeal.base.utils.HttpClientPropertiesUtil">
    	<property name="location" value="classpath:api.properties"/>
 	</bean>
 	<bean class="com.snapdeal.base.startup.config.AppEnvironmentContext" id="appEnvironmentContext">
    	<constructor-arg value="SCORE" />
	</bean>
	
	<bean id="ScoreSalesforceService" class="org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition" lazy-init="true">  
	  <property name="schemaCollection">  
      	<bean class="org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection">  
        	<property name="inline" value="true" />  
	        	<property name="xsds">  
	          	<list>  
	          	  <value>classpath:Authentication.xsd</value>
	              <value>classpath:PickupPincodeServiceability.xsd</value>
	              <value>classpath:CreateSeller.xsd</value>
	            </list>  
	        </property>  
	  	</bean>
	  </property>  
      <property name="portTypeName" value="ScoreSalesforceService"/>  
      <property name="serviceName" value="ScoreSalesforceServices"/>
      <property name="locationUri" value="http://score.services.com/services/soap/"/>  
	</bean>

    <bean id="healthCheckManager" class="com.snapdeal.fs.healthcheck.impl.HealthCheckManagerImpl">
        <constructor-arg index="0">
            <list>
                <ref bean="aerospike_healthcheck_handler"/>
            </list>

        </constructor-arg>
        <constructor-arg index="1" ref="healthCheckConfiguration"/>
    </bean>

    <bean id="aerospike_healthcheck_handler" class="com.snapdeal.fs.healthcheck.impl.FSAerospikeHeathCheckHandler">
        <constructor-arg index="0" value="score aerospike"/>
    </bean>

	<bean id="fcStateSynchronizer" class="com.snapdeal.score.services.promiseble.services.PEFCStateSynchronizerImpl"/>

	<bean id="fcOrderDetailDAO" class="com.snapdeal.score.services.promiseble.dao.impl.PEFCOrderDetailsDAOImpl"/>

	<bean id="scoreCacheAerospikeClusterService" class="com.snapdeal.score.data.aerospike.service.impl.ScoreAerospikeService" />
	
	<aop:aspectj-autoproxy expose-proxy="true"/>
	
	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager" />
	<task:annotation-driven executor="executor" scheduler="reloadCacheScheduler"/>
	<task:executor id="executor" pool-size="100" />
	<task:scheduler id="reloadCacheScheduler" pool-size="100" />
</beans>



</beans>
